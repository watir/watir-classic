h1. Scripting Web Tests

h2. Tutorial Documentation

This documentation accompanies the one-day tutorial.

h3. References

Useful information that will help you complete the tutorial labs.

* "Installation":install.html. Installing Ruby, Timeclock, and the WTR
  toolkit. 
* "Ruby Cheat Sheet":Ruby-cheat-sheet.doc. A quick overview of the
  Ruby language.  
* "Watir Cheat Sheet":Watir-cheat-sheet.doc. 
  Overview of the Watir library and a few other helpful things.
* "Using IRB and Watir":Using_IRB_and_Watir_to_Create_Automated_Scripts.doc
  describes how to use Ruby's interactive shell to create Watir tests.
* The Watir User Guide and Example Test Case are installed with Watir 
  (look in your Start menu).
* "Timeclock Specification":Functional_Specification_for_the_Timeclock_Application.doc. 
  A functional description of Timeclock.
* "Assertions in Test::Unit":Assertions.html.
  Detailed documentation of the assertions defined in the Test::Unit library.
* An online copy of Programming Ruby (the Pickaxe Book) is installed with Ruby if you would like
  more detail about the language (look in your Start menu).

h3. Lab Exercises

A series of labs based on the Timeclock application.

* Lab 1. "Getting Started":../exercises/getting-started-lab.html. 
  Test Timeclock manually and develop test ideas.
* Lab 2. "Driving Timeclock Using IRB":../exercises/irb-iec-lab.html.
  Use IRB and the WTR toolkit to drive the Timeclock application.
* Lab 3. "Writing Scripts":../exercises/iec-scripts-lab.html.
  Create simple scripts.
* Lab 4. "Verifying Results":../exercises/verifying-results.html.
  Check the expected results in your test scripts.
* Lab 5. "Assertions":../exercises/assertions.html
  Use assertions to check expected results.
* Lab 6. "Harnessing Tests":../exercises/test-harness.html.
  Collect your tests in a test harness.

h3. Presentation Decks

Powerpoint slides we review in the tutorial.

* "Introduction":tutorial_introduction.ppt
* "How Watir Works":how_watir_works.ppt
* "The Watir Community":watir_world.ppt
* "Other Testing Tools":beyond_watir.ppt

h3. Advanced Material

This is advanced material that ordinarily is not used in the one-day
tutorial. These describe other interfaces that can be used to test the
Timeclock software.

* "Timeclock Command Line Interface":Timeclock-cheat-sheet.doc
* "Timeclock Web Services Interface":web-services-documentation.doc
* Bonus Lab. "Testing Web Services":exercises/web-services-lab.html
  Test the web services interface to the Timeclock application.

h2. Online Documentation

Further information that can be found on the web.

h3. Watir Project

More information about Watir and the Web Testing with Ruby project.

* "Watir Homepage":http://wtr.rubyforge.org/.
* "RubyForge Repository":http://rubyforge.org/projects/wtr/.
  The latest downloads.
* "Mailing List":http://rubyforge.org/pipermail/wtr-general/.
  
h3. Further Reading

Articles that develop themes and topics introduced in this tutorial.

h4. About Watir

* "Watir Works":http://www.kohl.ca/articles/watir_works.pdf 
  Jonathan Kohl and Paul Rogers describe how to use Watir to test web applications.
* "Gathering Performance Information While Executing Everyday Automated Tests":http://www.informit.com/articles/printerfriendly.asp?p=370634 
  Michael Kelly demonstrates how to collect simple performance data using Watir.
* "Wireless Matrix AutoTests.":Wireless%20Matrix%20AutoTests.doc. Paul Rogers 
  describes how they use Web Testing for Ruby for production testing at Wireless
  Matrix.
* Also see this 
  "list of articles about Watir":http://wtr.rubyforge.org/wiki/wiki.pl?WatirArticles 
  on our project wiki.
* Watir makes extensive use of the COM interface to Internet Explorer. 
  This is "documented":http://msdn.microsoft.com/workshop/browser/webbrowser/reference/Objects/InternetExplorer.asp
  online.

h4. About Ruby

* "Programming in Ruby":http://www.pragmaticprogrammer.com/articles/ddj_ruby.pdf.
  Dave Thomas and Andy Hunt provide programmers with a succinct overview of the 
  Ruby language.
* "Why's (Poignant) Guide to Ruby":http://poignantguide.net/ruby/.
  An introduction to Ruby for non-programmers, with cartoons. 

h4. More about using Ruby for Testing

* "Bypassing the GUI":http://www.testing.com/writings/bypassing-the-gui.pdf. 
  Brian Marick demonstrates how to test applications like Microsoft Word 
  using Ruby to interact with COM interfaces.
* "Behind the Screens":http://www.testing.com/writings/behind-the-screens.pdf.
  Brian Marick demonstrates how to use Ruby to test and explore a web services 
  interface, such as Google's.

