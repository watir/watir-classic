#!/usr/bin/env ruby

def help(status)
  puts <<EOS
Usage: ruby-trace [switches] [--] ruby-arguments
   -t 'level'   Set threshold for global trace object to 'level'.
                --threshold can also be used.
   -i 'level'   Set threshold for trace's internal logging to 'level'.
                --internal can also be used.
   -h,--help    This message.
Ruby-arguments are any args (including options) you might pass to 'ruby'

Examples:
   ruby-trace -t verbose myprog.rb arg1 arg2
   ruby-trace -t verbose -- -r my-ruby-includes/helper myprog.rb arg1 arg2
EOS
  exit status
end

require 'getoptlong'

opts = GetoptLong.new([ "--threshold", "-t", GetoptLong::REQUIRED_ARGUMENT ],
                      [ "--internal", "-i", GetoptLong::REQUIRED_ARGUMENT ],
                      [ "--help", "-h", GetoptLong::NO_ARGUMENT ])
opts.ordering=GetoptLong::REQUIRE_ORDER

# These are the default commands to be put into TRACEENV. Calling with
# no options turns on event-level tracing.
commands = { 'user' => "--threshold=event" }

begin
  opts.each { | option, arg |
    case option
    when '--threshold'
      commands['user'] = "--threshold=#{arg}"
    when '--internal'
      commands['internal'] = "trace--threshold=#{arg}"
    when '--help'
      help 0
    else
      help 0
    end
  }
rescue # Exit on bad option.
  help 1
end

help 0 if ARGV.length == 0

ENV['TRACEENV'] = commands.values.join(' ')

system("ruby " + ARGV.join(' '))

