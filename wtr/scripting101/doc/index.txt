h1. Scripting Web Tests

h2. Tutorial Documentation

This documentation accompanies the one-day tutorial.

h3. References

Useful information you'll need to complete the tutorial labs.

* "Installation":install.html. Installing Ruby, Timeclock, and the WTR
  toolkit. 
* "Ruby Cheat Sheet":Ruby-cheat-sheet.doc. A quick overview of the
  Ruby language.  
* "Scripting Web Tests Cheat Sheet":Internet%20Explorer%20Cheat%20Sheet.doc. 
  Overview of the WATIR toolkit and a few extensions for Timeclock.
* WATIR User Guide

h3. Lab Exercises

A series of labs based on the Timeclock application.

* Lab 1. "Getting Started":../exercises/getting-started-lab.html. 
  Test Timeclock manually and develop test ideas.
* Lab 2. "Driving Timeclock Using IRB":../exercises/irb-iec-lab.html.
  Use IRB and the WTR toolkit to drive the Timeclock application.
* Lab 3. "Writing Scripts":../exercises/iec-scripts-lab.html.
  Create simple scripts.
* Lab 4. "Verifying Results":../exercises/verifying-results.html.
  Check the expected results in your test scripts.
* Lab 5. "Harnessing Tests":../exercises/test-harness.html.
  Collect your tests in a test harness. Use assertions.

h3. Advanced Material

This is advanced material that ordinarily is not used in the one-day
tutorial. These describe other interfaces that can be used to test the
Timeclock software.

* "Timeclock Command Line Interface":Timeclock-cheat-sheet.doc
* "Timeclock Web Services Interface":web-services-documentation.doc
* Bonus Lab. "Testing Web Services":exercises/web-services-lab.html
  Test the web services interface to the Timeclock application.

h3. Web Testing with Ruby

More information about the Web Testing with Ruby project.

* "Project Wiki":http://www.clabs.org/wtr/.
  Project website. A "wiki" is a website that anyone can update.
* "RubyForge Repository":http://rubyforge.org/projects/wtr/.
  The latest downloads.
* "Mailing List":http://rubyforge.org/pipermail/wtr-general/.
  
h3. Further Reading

Articles that develop themes and topics introduced in this tutorial, available
on the web.

* "Wireless Matrix AutoTests.":Wireless%20Matrix%20AutoTests.doc. Paul Rogers 
  describes how the use Web Testing for Ruby for production testing at Wireless
  Matrix.
* "Programming in Ruby":http://www.pragmaticprogrammer.com/articles/ddj_ruby.pdf.
  Dave Thomas and Andy Hunt provide programmers with a succinct overview of the 
  Ruby language.
* "Why's (Poignant) Guide to Ruby":http://poignantguide.net/ruby/.
  An introduction to Ruby for non-programmers, with cartoons. 
* "Bypassing the GUI":http://www.testing.com/writings/bypassing-the-gui.pdf. 
  Brian Marick demonstrates how to test applications like Microsoft Word 
  using Ruby to interact with COM interfaces.
* "Behind the Screens":http://www.testing.com/writings/behind-the-screens.pdf.
  Brian Marick demonstrates how to use Ruby to test and explore a web services 
  interface, such as Google's.

