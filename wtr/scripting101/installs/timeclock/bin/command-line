#!/usr/bin/env ruby

require "irb"
require 'irb/extend-command'

require 'getoptlong'
$:[0,0]='..'
require 'timeclock/util/misc'
require 'timeclock/marshalled/include-all'
require 'timeclock/server/UserManager'
require 'timeclock/util/Configuration'
require 'timeclock/util/RichlyCallingWrapper'

# On Windows, you'll need something like this:
# ENV["VW_TIMECLOCK_DATA_DIR"] = "C:/My Documents/Timeclock"
# The following line will fail if it's not set.
Timeclock::Configuration.ensure_data_dir
Timeclock::Configuration.start_log("command-line.txt")

ENV["VW_TIMECLOCK_PORT"] ||= "21961"
ENV["VW_TIMECLOCK_HOST"] ||= "localhost"
network_mode = :client_and_server

opts = GetoptLong.new(['--client-of', '-c', GetoptLong::REQUIRED_ARGUMENT],
                      ['--serve-at', '-s', GetoptLong::REQUIRED_ARGUMENT])
opts.each { | opt, arg |
  case opt
    when '--client-of'
    puts "Will connect to server at '#{arg}'."
    ENV["VW_TIMECLOCK_HOST"] = arg
    network_mode = :client_only
  when '--serve-at'
    puts "Will serve from '#{arg}'."
    ENV["VW_TIMECLOCK_HOST"] = arg
  end
}

host = ENV["VW_TIMECLOCK_HOST"]  # Just shorthand
port = ENV["VW_TIMECLOCK_PORT"]


if network_mode == :client_and_server
  user_manager_server = Timeclock::Server::NetworkableUserManager.new
  user_manager_server.advertise(host, port)
  at_exit {
    # This should be unneeded, but flush to disk - just in case.
    user_manager_server.deactivate_all_sessions
  }
end

user_manager = Timeclock::Server::NetworkableUserManager.connect_to(host, port)

require 'timeclock/client/command-line/Interface'
include Timeclock::Client::CommandLine::Interface


if ARGV[0]
  user = ARGV[0]
  ARGV[0,1]=[]
else
  user = ENV["USER"] || "default"
end

puts "Welcome to Timeclock. Looking up records for '#{user}'..."
session = Timeclock::RichlyCallingWrapper.new(user_manager.session_for(user))
Timeclock::Client::CommandLine::Interface.attach_to_session(session)
puts "Type 'help' for help."



# We need to tell IRB to customize itself, but the only way to do that
# is through a configuration file. The names are, by default, all
# hardcoded, so I've hacked IRB to take the name of a single configuration
# file in a global. Only that configuration file is processed in this
# version of IRB (to avoid accidentally loading a user's favorite
# config file).
#
# Note that the below way of finding the configuration file depends on
# this file being invoked with a real pathname (like ~/src/timeclock/bin),
# not via PATH lookup. Surely there's a method somewhere to tell me the
# absolute pathname of the script being executed. 

require 'timeclock/client/command-line/irb-hack'
$irbrc = $0 + ".init"

IRB.start(__FILE__)

