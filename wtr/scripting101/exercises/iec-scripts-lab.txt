h2=. Scripting for Testers

h2=. Lab 3: Writing Scripts

Now that you've used IRB to drive Internet Explorer, it is time to
create a script. Actually, you'll create several. Create each script
using Scite, the ruby editor. You may wish to try the commands in IRB
first, to make sure they are right.

There are three ways to run scripts: 

# The simplest method is to type F5 while editing the scripting in
  Scite. This will save the file and then execute it. The output will
  be displayed in a separate window.

# A second method is to run a script from the system command
  line. Type "ruby script-name.rb" at the DOS prompt. This is the most
  reliable method. Use it you are having trouble using F5 in Scite.

# A third method is to load the script into IRB. Type "load
  'script-name.rb'" at the IRB prompt. The advantage of this method is
  that you can check variables and interact with the IE Controller
  after the script has run. This gives you a method for debugging your
  scripts.

When you automate tests, you need to be able to repeat tests much more
precisely than when you are testing manually. The
'ensure_no_user_data' method has been specifically provided as a
testability feature for timeclock. You may find it useful.

You will also have to make sure you call "wait" after each click or
submit command. These interact with the server, and you will get
hard-to-debug synchronization bugs if you don't do this. "wait" is a
command that waits for the browser to stop downloading. It waits a
variable amount of time.

Create and execute each of these scripts. As you complete each script,
demonstrate it to your instructors.

#    *Start The Day.* This script logs in and navigates to the main time
     clock page, and then starts the day.

#    *Start, Stop and Pause.* This script starts, stops, pauses, and
      restarts a job. You decide the order for these actions.

#    *Job Switching.* This script creates two jobs and then switches
      back and forth between them every few seconds. The command to
      sleep for 5 seconds in ruby is "sleep 5".


h3=. Solution to Lab 2

See lab/solutions/lab2.rb for an example of a solution to Lab 2
converted to a script.
